@{
  var name = Context.Session.GetString("_Name") != null ? Context.Session.GetString("_Name") : null;
  var role = Context.Session.GetString("_Role") != null ? Context.Session.GetString("_Role") : null;
  var Id = Context.Session.GetInt32("_ID") != null ? Context.Session.GetInt32("_ID") : null;
}
<p style="margin-bottom: 15px;">
  <a asp-area="" asp-controller="User" asp-action="ExportExcel" class="btn btn-success">Export Excel</a>
  <span class="text-danger">@ViewBag.ErrorMessage</span>
</p>
<div class="container">
  <div class="row">
    @if (role == "Admin")
    {
      <div class="col-6">
        <div class="card">
          <div class="card-header">
            <h6 style="text-align:center; weight: bold; color: rgb(113, 107, 107);">Percent of account in role</h6>
          </div>
          <div style="display: flex; justify-content: center; align-items: center; height: 450px;">
            <canvas id="userPercent"></canvas>
          </div>
        </div>
      </div>
    }

    @* each *@
    <div class="col-6">
      <div class="card">
        <div class="card-header">
          <h6 style="text-align:center; weight: bold; color: rgb(113, 107, 107);">Car brand count</h6>
        </div>
        <div style="display: flex; justify-content: center; align-items: center; height: 450px;">
          <canvas id="carBrand"></canvas>
        </div>
      </div>
    </div>
    @* each *@
    <div class="col-6">
      <div class="card">
        <div class="card-header">
          <h6 style="text-align:center; weight: bold; color: rgb(113, 107, 107);">Car brand count</h6>
        </div>
        <div style="display: flex; justify-content: center; align-items: center; height: 450px;">
          <canvas id="carBrandManager"></canvas>
        </div>
      </div>
    </div>
    @* each *@
    <div class="col-6">
      <div class="card">
        <div class="card-header">
          <h6 style="text-align:center; weight: bold; color: rgb(113, 107, 107);">Car brand order</h6>
        </div>
        <div style="display: flex; justify-content: center; align-items: center; height: 450px;">
          <canvas id="bookingSuccessChart"></canvas>
        </div>
      </div>
    </div>


  </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const ctx = document.getElementById('userPercent');

  new Chart(ctx, {
    type: 'polarArea',
    data: {
      labels: [@Html.Raw(ViewData["labels"])],
      datasets: [{
        label: 'Percent of account in role',
        data: [@Html.Raw(ViewData["Percent"])],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
      }
    }
  });
  //car brand
  const carBrand = document.getElementById('carBrand');
  var brandLabels = @Html.Raw(Json.Serialize(ViewBag.BrandLabels));
  var brandData = @Html.Raw(Json.Serialize(ViewBag.BrandData));
  var backgroundColors = generateBackgroundColors(brandLabels.length);
  new Chart(carBrand, {
    type: 'pie',
    data: {
      labels: brandLabels,
      datasets: [{
        label: 'Quantity: ',
        data: brandData,
        backgroundColor: backgroundColors,
      }]
    },
    options: {
      scales: {
      }
    }
  });
  //car brand manager
  const carBrandManager = document.getElementById('carBrandManager');
  var brandLabelsManager = @Html.Raw(Json.Serialize(ViewBag.BrandLabelsManager));
  var brandDataManager = @Html.Raw(Json.Serialize(ViewBag.BrandDataManager));
  var backgroundColorsManager = generateBackgroundColors(brandLabelsManager.length);
  new Chart(carBrandManager, {
    type: 'pie',
    data: {
      labels: brandLabelsManager,
      datasets: [{
        label: 'Quantity: ',
        data: brandDataManager,
        backgroundColor: backgroundColorsManager,
      }]
    },
    options: {
      scales: {
      }
    }
  });

  ///car order successful

  var carOrderSuccessful = document.getElementById('bookingSuccessChart').getContext('2d');
  var models = @Html.Raw(Json.Serialize(ViewBag.models));
  var counts = @Html.Raw(Json.Serialize(ViewBag.counts));
  var backgroundColorsManager = generateBackgroundColors(models.length);

  var chart = new Chart(carOrderSuccessful, {
    type: 'bar',
    data: {
      labels: models,
      datasets: [{
        label: "Số lượng đặt chỗ thành công",
        data: counts,
        backgroundColor: backgroundColorsManager
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
        }
      }
    }
  });






  // create background color
  function generateBackgroundColors(count) {
    var colors = [];
    for (var i = 0; i < count; i++) {
      // use random color
      var randomColor = getRandomColor();
      colors.push(randomColor);
    }
    return colors;
  }

  // Random color
  function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }

</script>
