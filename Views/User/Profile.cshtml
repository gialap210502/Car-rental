@model Car_rental.Models.user
@using System.Security.Cryptography
@using System.Text
@{
  ViewData["Title"] = "Profile";
  var Id = Context.Session.GetInt32("_ID") != null ? Context.Session.GetInt32("_ID") : null;
  var timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
  var encodeKey = "rf8whwaejNhJiQG2bsFubSzccfRc/iRYyGUn6SPmT6y/L7A2XABbu9y4GvCoSTOTpvJykFi6b1G0crU8et2O0Q==";
  var merId = "EPAY000001";
  var amount = "200000";
  var merTrxId = merId + timeStamp;
  var merchantToken = "";
  // Calculate the SHA-256 hash for merchantToken
  using (SHA256 sha256Hash = SHA256.Create())
  {
    byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(timeStamp + merTrxId + merId + amount + encodeKey));
    merchantToken = BitConverter.ToString(bytes).Replace("-", "").ToLower();
    // Now, 'merchantToken' contains the SHA-256 hash in lowercase hex format
  }

}
<section class="hero-wrap hero-wrap-2 js-fullheight" style="background-image: url('../images/image_1.jpg');"
  data-stellar-background-ratio="0.5">
  <div class="overlay"></div>
  <div class="container">
    <div class="row no-gutters slider-text js-fullheight align-items-end justify-content-start">
      <div class="col-md-9 ftco-animate pb-5">
        <p class="breadcrumbs"><span class="mr-2"><a href="/">Home <i class="ion-ios-arrow-forward"></i></a></span>
          <span>Profile</span>
        </p> <i class="ion-ios-arrow-forward"></i></span></p>
        <h1 class="mb-3 bread">Profile</h1>
      </div>
    </div>
  </div>
</section>
<section style="background-color: #eee;">
  <div class="container py-5">
    <div class="row">
      <div class="col-lg-4">
        <div class="card mb-4">
          <div class="card-body text-center">
            @if (Model.image == null)
            {
              <img src="~/ImageUser/@@@@@@@@.png" alt="avatar" class="rounded-circle img-fluid" style="width: 150px;" />
            }
            else
            {
              <img src="~/ImageUser/@Html.DisplayFor(model => model.image)" alt="avatar" class="rounded-circle img-fluid"
                style="width: 150px;" />
            }
            <h5 class="my-3">@Html.DisplayFor(model => model.name)</h5>
            <p class="text-muted mb-1">@Html.DisplayFor(model => model.email)</p>
            <p class="text-muted mb-4">@Html.DisplayFor(model => model.phone)</p>
            <p>@merchantToken</p>
            <div class="d-flex justify-content-center mb-2">
              <a type="button" class="btn btn-outline-primary ms-1" asp-controller="user" asp-action="edit"
                asp-route-id="@Id">Edit profile</a>
              <a type="button" class="btn btn-outline-primary ms-1" asp-controller="user" asp-action="BusinessRegister"
                asp-route-userId="@Id">Business Registration</a>
              <a class="btn btn-outline-primary ms-1" type="button" data-toggle="modal" data-target="#myModal">get
                coin</a>
            </div>
          </div>
        </div>
      </div>
      <div class="col-lg-8">
        <div class="card mb-4">
          <div class="card-body">
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Full Name</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@Html.DisplayFor(model => model.name)</p>
              </div>
            </div>
            <hr>
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Email</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@Html.DisplayFor(model => model.email)</p>
              </div>
            </div>
            <hr>
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Phone</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@Html.DisplayFor(model => model.phone)</p>
              </div>
            </div>
            <hr>
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Address</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@Html.DisplayFor(model => model.address)</p>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-6">
            <div class="card mb-4 mb-md-0">
              <div class="card-body">
                <p class="mb-4"> Citizen Identification
                </p>
                @if (Model.image == null)
                {
                  <span>You haven't uploaded yet.</span>
                }
                else
                {
                  <img src="~/Identify/@Html.DisplayFor(model => model.citizen_identification)" alt="avatar"
                    class="rounded img-fluid" style="width: 350px;" />
                }
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card mb-4 mb-md-0">
              <div class="card-body">
                <p class="mb-4"> Driver License
                </p>
                @if (Model.image == null)
                {
                  <span>You haven't uploaded yet.</span>
                }
                else
                {
                  <img src="~/DriveLicense/@Html.DisplayFor(model => model.driver_license)" alt="avatar"
                    class="rounded img-fluid" style="width: 350px;" />
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- The Modal -->
<div class="modal" id="myModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">

      <!-- Modal Header -->
      <div class="modal-header">
        <h4 class="modal-title">Get Coin</h4>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>

      <!-- Modal body -->
      <div class="modal-body">
        <div class="row">
          <div class="col-12">
            <h3>VND to Coin : </h3>
            <p>1000 VND = 1 Coin</p>
          </div>
          <div class="col-12">
            <table class="table-bordered col-12">
              <thead style="background-color: #01d28e; color: white; font-weight: bold; text-align: center;">
                <tr>
                  <th>Coins</th>
                  <th>Price</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td style="font-weight: bold; text-align: center;">
                    100
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    100,000 VND
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    <a class="btn btn-primary" onclick="calculateAndOpenPayment1('https://sandbox.megapay.vn')">Buy</a>
                  </td>
                </tr>
                <tr>
                  <td style="font-weight: bold; text-align: center;">
                    200
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    200,000 VND
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    <a class="btn btn-primary" onclick="calculateAndOpenPayment2('https://sandbox.megapay.vn')">Buy</a>
                  </td>
                </tr>
                <tr>
                  <td style="font-weight: bold; text-align: center;">
                    500
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    500,000 VND
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    <a class="btn btn-primary" onclick="calculateAndOpenPayment3('https://sandbox.megapay.vn')">Buy</a>
                  </td>
                </tr>
                <tr>
                  <td style="font-weight: bold; text-align: center;">
                    1000
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    1,000,000 VND
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    <a class="btn btn-primary" onclick="calculateAndOpenPayment4('https://sandbox.megapay.vn')">Buy</a>
                  </td>
                </tr>
                <tr>
                  <td style="font-weight: bold; text-align: center;">
                    2000
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    2,000,000 VND
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    <a class="btn btn-primary" onclick="calculateAndOpenPayment5('https://sandbox.megapay.vn')">Buy</a>
                  </td>
                </tr>
                <tr>
                  <td style="font-weight: bold; text-align: center;">
                    3000
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    3,000,000 VND
                  </td>
                  <td style="font-weight: bold; text-align: center;">
                    <a class="btn btn-primary" onclick="calculateAndOpenPayment6('https://sandbox.megapay.vn')">Buy</a>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <form id="megapayForm" name="megapayForm" method="POST">
          <input type="hidden" name="buyerFirstNm" value="@Html.DisplayFor(model => model.name)">
          <input type="hidden" name="buyerEmail" value="@Html.DisplayFor(model => model.email)">
          <input type="hidden" name="merId" value="@merId" />
          <input type="hidden" name="currency" value="VND" />
          <input type="hidden" name="amount" id="amount" />
          <input type="hidden" name="invoiceNo" value="@timeStamp@merId" />
          <input type="hidden" name="goodsNm" value="test" />
          <input type="hidden" name="payType" value="NO" />
          <input type="hidden" name="callBackUrl" value="https://localhost:7160/user/OrderInfor" />
          <input type="hidden" name="notiUrl" value="https://localhost:7160/user/OrderInfor" />
          <input type="hidden" name="reqDomain" value="https://localhost:7160/user/OrderInfor" />
          <input type="hidden" name="fee" value="0" />
          <input type="hidden" name="description" value="testsystem" />
          <input type="hidden" name="userLanguage" value="EN" />
          <input type="hidden" name="timeStamp" value="@timeStamp" />
          <input type="hidden" name="merTrxId" value="@merTrxId" />
          <input type="hidden" name="windowColor" value="#ef5459" />
          <input type="hidden" name="windowType" value="0" />
          <input type="hidden" name="merchantToken" id="merchantToken" />
        </form>

      </div>

      <!-- Modal footer -->
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
      </div>

    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsSHA/2.0.2/sha.js"></script>
<script>
  function calculateAndOpenPayment1(paymentUrl) {
    // Thay đổi giá trị của amount
    var amount = '100000';

    // Tính toán merchantToken trực tiếp trong JavaScript
    var timeStamp = new Date().toISOString().replace(/\D/g, '');
    var merTrxId = "@merId" + "@timeStamp";
    var dataToHash = "@timeStamp" + "@merTrxId" + "@merId" + amount + "@encodeKey";

    var sha256Hash = new jsSHA("SHA-256", "TEXT");
    sha256Hash.update(dataToHash);
    var merchantToken = sha256Hash.getHash("HEX").toLowerCase();

    // Đặt giá trị của amount và merchantToken vào các trường input nếu chúng tồn tại
    if (document.getElementById('amount')) {
      document.getElementById('amount').value = amount;
    }
    if (document.getElementById('merchantToken')) {
      document.getElementById('merchantToken').value = merchantToken;
    }

    // Gọi hàm window.openPayment với giá trị mới của amount, merchantToken và URL
    window.openPayment(1, paymentUrl);
  }
  function calculateAndOpenPayment2(paymentUrl) {
    // Thay đổi giá trị của amount
    var amount = '200000';

    // Tính toán merchantToken trực tiếp trong JavaScript
    var timeStamp = new Date().toISOString().replace(/\D/g, '');
    var merTrxId = "@merId" + "@timeStamp";
    var dataToHash = "@timeStamp" + "@merTrxId" + "@merId" + amount + "@encodeKey";

    var sha256Hash = new jsSHA("SHA-256", "TEXT");
    sha256Hash.update(dataToHash);
    var merchantToken = sha256Hash.getHash("HEX").toLowerCase();

    // Đặt giá trị của amount và merchantToken vào các trường input nếu chúng tồn tại
    if (document.getElementById('amount')) {
      document.getElementById('amount').value = amount;
    }
    if (document.getElementById('merchantToken')) {
      document.getElementById('merchantToken').value = merchantToken;
    }

    // Gọi hàm window.openPayment với giá trị mới của amount, merchantToken và URL
    window.openPayment(1, paymentUrl);
  }
  function calculateAndOpenPayment3(paymentUrl) {
    // Thay đổi giá trị của amount
    var amount = '500000';

    // Tính toán merchantToken trực tiếp trong JavaScript
    var timeStamp = new Date().toISOString().replace(/\D/g, '');
    var merTrxId = "@merId" + "@timeStamp";
    var dataToHash = "@timeStamp" + "@merTrxId" + "@merId" + amount + "@encodeKey";

    var sha256Hash = new jsSHA("SHA-256", "TEXT");
    sha256Hash.update(dataToHash);
    var merchantToken = sha256Hash.getHash("HEX").toLowerCase();

    // Đặt giá trị của amount và merchantToken vào các trường input nếu chúng tồn tại
    if (document.getElementById('amount')) {
      document.getElementById('amount').value = amount;
    }
    if (document.getElementById('merchantToken')) {
      document.getElementById('merchantToken').value = merchantToken;
    }

    // Gọi hàm window.openPayment với giá trị mới của amount, merchantToken và URL
    window.openPayment(1, paymentUrl);
  }
  function calculateAndOpenPayment4(paymentUrl) {
    // Thay đổi giá trị của amount
    var amount = '1000000';

    // Tính toán merchantToken trực tiếp trong JavaScript
    var timeStamp = new Date().toISOString().replace(/\D/g, '');
    var merTrxId = "@merId" + "@timeStamp";
    var dataToHash = "@timeStamp" + "@merTrxId" + "@merId" + amount + "@encodeKey";

    var sha256Hash = new jsSHA("SHA-256", "TEXT");
    sha256Hash.update(dataToHash);
    var merchantToken = sha256Hash.getHash("HEX").toLowerCase();

    // Đặt giá trị của amount và merchantToken vào các trường input nếu chúng tồn tại
    if (document.getElementById('amount')) {
      document.getElementById('amount').value = amount;
    }
    if (document.getElementById('merchantToken')) {
      document.getElementById('merchantToken').value = merchantToken;
    }

    // Gọi hàm window.openPayment với giá trị mới của amount, merchantToken và URL
    window.openPayment(1, paymentUrl);
  }
  function calculateAndOpenPayment5(paymentUrl) {
    // Thay đổi giá trị của amount
    var amount = '2000000';

    // Tính toán merchantToken trực tiếp trong JavaScript
    var timeStamp = new Date().toISOString().replace(/\D/g, '');
    var merTrxId = "@merId" + "@timeStamp";
    var dataToHash = "@timeStamp" + "@merTrxId" + "@merId" + amount + "@encodeKey";

    var sha256Hash = new jsSHA("SHA-256", "TEXT");
    sha256Hash.update(dataToHash);
    var merchantToken = sha256Hash.getHash("HEX").toLowerCase();

    // Đặt giá trị của amount và merchantToken vào các trường input nếu chúng tồn tại
    if (document.getElementById('amount')) {
      document.getElementById('amount').value = amount;
    }
    if (document.getElementById('merchantToken')) {
      document.getElementById('merchantToken').value = merchantToken;
    }

    // Gọi hàm window.openPayment với giá trị mới của amount, merchantToken và URL
    window.openPayment(1, paymentUrl);
  }
  function calculateAndOpenPayment6(paymentUrl) {
    // Thay đổi giá trị của amount
    var amount = '3000000';

    // Tính toán merchantToken trực tiếp trong JavaScript
    var timeStamp = new Date().toISOString().replace(/\D/g, '');
    var merTrxId = "@merId" + "@timeStamp";
    var dataToHash = "@timeStamp" + "@merTrxId" + "@merId" + amount + "@encodeKey";

    var sha256Hash = new jsSHA("SHA-256", "TEXT");
    sha256Hash.update(dataToHash);
    var merchantToken = sha256Hash.getHash("HEX").toLowerCase();

    // Đặt giá trị của amount và merchantToken vào các trường input nếu chúng tồn tại
    if (document.getElementById('amount')) {
      document.getElementById('amount').value = amount;
    }
    if (document.getElementById('merchantToken')) {
      document.getElementById('merchantToken').value = merchantToken;
    }

    // Gọi hàm window.openPayment với giá trị mới của amount, merchantToken và URL
    window.openPayment(1, paymentUrl);
  }
</script>
