@model List<Conversation>

@{
  ViewData["Title"] = "Chat";
  var Id = Context.Session.GetInt32("_ID") != null ? Context.Session.GetInt32("_ID") : null;
  var name = Context.Session.GetString("_Name") != null ? Context.Session.GetString("_Name") : null;
}
<section class="hero-wrap hero-wrap-2 js-fullheight" style="background-image: url('images/image_1.jpg');"
  data-stellar-background-ratio="0.5">
  <div class="overlay"></div>
  <div class="container">
    <div class="row no-gutters slider-text js-fullheight align-items-end justify-content-start">
      <div class="col-md-9 ftco-animate pb-5">
        <p class="breadcrumbs"><span class="mr-2"><a href="/">Home <i class="ion-ios-arrow-forward"></i></a></span>
          <span>Profile</span>
        </p> <i class="ion-ios-arrow-forward"></i></span></p>
        <h1 class="mb-3 bread">Profile</h1>
      </div>
    </div>
  </div>
</section>
<section style="background-color: #eee;">
  <div class="container-fluid py-5">
    <div class="row d-flex justify-content-center">
      <div class="col-md-10">
        <div class="card">
          <div class="card-body" data-mdb-perfect-scrollbar="true"
            style="position: relative; height: 400px; overflow-y: scroll;">
            @foreach (var item in Model)
            {
              @foreach (var message in item.Messages)
              {
                <div class="d-flex justify-content-between">
                  @if (message.user.id == (Context.Session.GetInt32("_ID") ?? 0))
                  {
                    <p class="small mb-1 text-muted">@message.SentAt.ToString("dd MMM h:mm tt")</p>
                    <p class="small mb-1">@message.user.name</p>
                  }
                  else
                  {
                    <p class="small mb-1">@message.user.name</p>
                    <p class="small mb-1 text-muted">@message.SentAt.ToString("dd MMM h:mm tt")</p>
                  }
                </div>
                <div
                  class="d-flex flex-row @((message.user.id == (Context.Session.GetInt32("_ID") ?? 0)) ? "justify-content-end" : "justify-content-start") mb-4 pt-1">
                  @if (message.user.id != (Context.Session.GetInt32("_ID") ?? 0))
                  {
                    @if (message.user.image == null)
                    {
                      <img src="~/ImageUser/@@@@@@@@.png" alt="avatar 1" style="width: 45px; height: 100%;" />
                    }
                    else
                    {
                      <img src="~/ImageUser/@Html.DisplayFor(model => message.user.image)" alt="avatar 1"
                        style="width: 45px; height: 100%;" />
                    }
                    <div>
                      <p class="small p-2 ms-3 mb-3 rounded-3" style="background-color: #f5f6f7;">@message.Content</p>
                    </div>

                  }
                  else
                  {
                    <div>
                      <p class="small p-2 me-3 mb-3 text-white rounded-3 bg-warning">@message.Content</p>
                    </div>
                    @if (message.user.image == null)
                    {
                      <img src="~/ImageUser/@@@@@@@@.png" alt="avatar 1" style="width: 45px; height: 100%;" />
                    }
                    else
                    {
                      <img src="~/ImageUser/@Html.DisplayFor(model => message.user.image)" alt="avatar 1"
                        style="width: 45px; height: 100%;" />
                    }
                  }
                </div>
              }
            }

          </div>
          <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3">
            @* <form id="sendMessageForm" asp-action="SendMessage"> *@
            <form id="sendMessageForm">
              <input type="hidden" id="conversationId" name="conversationId"
                value="@Context.Request.Query["conversationId"]" />
              <input type="hidden" id="userId" name="userId" value="@Id" />
              <input type="hidden" id="userName" name="userId" value="@name" />
              <div class="input-group mb-0">
                <input type="text" id="content" name="content" class="form-control" placeholder="Type message"
                  aria-label="Recipient's username" aria-describedby="button-addon2" />
                <button type="submit" class="btn btn-warning" type="button" id="submitButton"
                  style="padding-top: .55rem;">
                  Button
                </button>
              </div>
            </form>
            <ul id="messagesList1"></ul>
          </div>
        </div>

      </div>
    </div>

  </div>
</section>


<section style="background-color: #eee;">
  <div class="row">
    <div class="col-md-4">
      <h2>Chat</h2>
      <ul id="messagesList"></ul>

      <div>
        <input type="text" id="userInput" placeholder="User" />
        <input type="text" id="messageInput" placeholder="Message" />
        <button id="sendButton1">Send</button>
      </div>
    </div>
  </div>
</section>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

  var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

  connection.on("ReceiveMessage", function (user, message) {
    var msg = user + " says: " + message;
    var li = document.createElement("li");
    li.textContent = msg;
    document.getElementById("messagesList").appendChild(li);
  });



  connection.start().then(function () {
    // Event listener code here
    console.log("--------Hubs Connected--------");
  }).catch(function (err) {
    console.error(err.toString());
  });


  document.getElementById("sendButton1").addEventListener("click", function (event) {
    var user = document.getElementById("userInput").value;
    var message = document.getElementById("messageInput").value;

    connection.invoke("SendMessage1", user, message).catch(function (err) {
      return console.error(err.toString());
    });


    event.preventDefault();
  });
  document.addEventListener("DOMContentLoaded", function () {
    var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

    connection.on("TakeMessage", function (timeStamp, userName, content) {
      // Tạo một đối tượng Date từ chuỗi thời gian
      var timeStampNew = new Date(timeStamp);
      // Định dạng lại thời gian theo yêu cầu
      function formatTime(date) {
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // Nếu hours là 0 thì hiển thị 12 giờ

        var day = date.getDate();
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var month = monthNames[date.getMonth()];

        var formattedTime = day + ' ' + month + ' ' + hours + ':' + (minutes < 10 ? '0' : '') + minutes + ' ' + ampm;
        return formattedTime;
      }
      var formattedTime = formatTime(timeStampNew);

      var msg = userName + " says: " + content + " at " + formattedTime;
      console.log(msg);
      var li = document.createElement("li");
      //div user info
      var divUserInfo = document.createElement("div");
      divUserInfo.classList.add("d-flex", "justify-content-between");
      var p = document.createElement("p");
      p.classList.add("small", "mb-1");
      var pMute = document.createElement("p");
      pMute.classList.add("small", "mb-1", "text-muted");

      //div message
      var divUserSend = document.createElement("div");
      divUserSend.classList.add("d-flex", "flex-row", "justify-content-end", "mb-4", "pt-1");
      var divUserGet = document.createElement("div");
      divUserGet.classList.add("d-flex", "flex-row", "justify-content-start", "mb-4", "pt-1");

      var img = document.createElement("img");
      img.style.width = "45px";
      img.style.height = "100%";

      var pMsgSend = document.createElement("p");
      pMsgSend.classList.add('small', 'p-2', 'me-3', 'mb-3', 'text-white', 'rounded-3', 'bg-warning');
      var pMsgGet = document.createElement("p");
      pMsgGet.classList.add('small', 'p-2', 'ms-3', 'mb-3', 'rounded-3');

      li.textContent = msg;
      document.getElementById("messagesList1").appendChild(li);
    });

    connection.start().then(function () {
      // Event listener code here
      console.log("--------Hubs Connected--------");
      var conversationId = parseInt(@Context.Request.Query["conversationId"]);
      connection.invoke("JoinConversation", conversationId).catch(function (err) {
        return console.error(err.toString());
      });
    }).catch(function (err) {
      console.error(err.toString());
    });

    document.getElementById("submitButton").addEventListener("click", function (event) {
      var conversationId = parseInt(document.getElementById("conversationId").value);
      var userName = document.getElementById("userName").value.toString();
      var user = parseInt(document.getElementById("userId").value);
      var message = document.getElementById("content").value.toString();
      console.log(conversationId + "-" + user + "-" + userName + "-" + message);
      connection.invoke("SendMessage", conversationId, user, userName, message).catch(function (err) {
        return console.error(err.toString());
      });

      event.preventDefault();
    });

  });



</script>
